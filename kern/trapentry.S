/* See COPYRIGHT for copyright information. */

#include <inc/mmu.h>
#include <inc/memlayout.h>
#include <inc/trap.h>



###################################################################
# exceptions/interrupts
###################################################################

/* TRAPHANDLER defines a globally-visible function for handling a trap.
 * It pushes a trap number onto the stack, then jumps to _alltraps.
 * Use TRAPHANDLER for traps where the CPU automatically pushes an error code.
 *
 * You shouldn't call a TRAPHANDLER function from C, but you may
 * need to _declare_ one in C (for instance, to get a function pointer
 * during IDT setup).  You can declare the function with
 *   void NAME();
 * where NAME is the argument passed to TRAPHANDLER.
 */
#define TRAPHANDLER(name, num)						\
	.globl name;		/* define global symbol for 'name' */	\
	.type name, @function;	/* symbol type is function */		\
	.align 2;		/* align function definition */		\
	name:			/* function starts here */		\
	pushl $(num);							\
	jmp _alltraps

/* Use TRAPHANDLER_NOEC for traps where the CPU doesn't push an error code.
 * It pushes a 0 in place of the error code, so the trap frame has the same
 * format in either case.
 */
#define TRAPHANDLER_NOEC(name, num)					\
	.globl name;							\
	.type name, @function;						\
	.align 2;							\
	name:								\
	pushl $0;							\
	pushl $(num);							\
	jmp _alltraps

.text

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */
#define T_DIVIDE     0		// divide error
#define T_DEBUG      1		// debug exception
#define T_NMI        2		// non-maskable interrupt
#define T_BRKPT      3		// breakpoint
#define T_OFLOW      4		// overflow
#define T_BOUND      5		// bounds check
#define T_ILLOP      6		// illegal opcode
#define T_DEVICE     7		// device not available
#define T_DBLFLT     8		// double fault
/* #define T_COPROC  9 */	// reserved (not generated by recent processors)
#define T_TSS       10		// invalid task switch segment
#define T_SEGNP     11		// segment not present
#define T_STACK     12		// stack exception
#define T_GPFLT     13		// general protection fault
#define T_PGFLT     14		// page fault
/* #define T_RES    15 */	// reserved
#define T_FPERR     16		// floating point error
#define T_ALIGN     17		// aligment check
#define T_MCHK      18		// machine check
#define T_SIMDERR   19		// SIMD floating point error

TRAPHANDLER_NOEC(DIVIDE, T_DIVIDE);
TRAPHANDLER_NOEC(DEBUG, T_DEBUG);		// debug exception
TRAPHANDLER_NOEC(NMI, T_NMI);		// non-maskable interrupt
TRAPHANDLER_NOEC(BRKPT, T_BRKPT);		// breakpoint
TRAPHANDLER_NOEC(OFLOW, T_OFLOW);		// overflow
TRAPHANDLER_NOEC(BOUND, T_BOUND);		// bounds check
TRAPHANDLER_NOEC(ILLOP, T_ILLOP);		// illegal opcode
TRAPHANDLER_NOEC(DEVICE, T_DEVICE);		// device not available
TRAPHANDLER(DBLFLT, T_DBLFLT);		// double fault
/* #define T_COPROC  9 */	// reserved (not generated by recent processors)
TRAPHANDLER(TSS, T_TSS);		// invalid task switch segment
TRAPHANDLER(SEGNP, T_SEGNP);		// segment not present
TRAPHANDLER(STACK, T_STACK);		// stack exception
TRAPHANDLER(GPFLT, T_GPFLT);		// general protection fault
TRAPHANDLER(PGFLT, T_PGFLT);		// page fault
/* #define T_RES    15 */	// reserved
TRAPHANDLER_NOEC(FPERR, T_FPERR);		// floating point error
TRAPHANDLER(ALIGN, T_ALIGN);		// aligment check
TRAPHANDLER_NOEC(MCHK, T_MCHK);		// machine check
TRAPHANDLER_NOEC(SIMDERR, T_SIMDERR);		// SIMD floating point error
TRAPHANDLER_NOEC(SYSCALL, T_SYSCALL);
/*push values to make the stack look like a struct Trapframe
load GD_KD into %ds and %es
pushl %esp to pass a pointer to the Trapframe as an argument to trap()
call trap (can trap ever return?)
Consider using the pushal instruction; it fits nicely with the layout of the struct Trapframe.
*/

_alltraps:
	pushl %ds
	pushl %es
	pushal
	movw $GD_KD, %ax
	movw %ax, %ds
	movw %ax, %es
	pushl %esp
	call trap
	
/*
 * Lab 3: Your code here for _alltraps
 */

